一、单个参数：mybatis不会做特殊处理
    #{参数名}，就可以取出参数值，其中{}中即使不是参数名也可以获得参数

二、多个参数：mybatis遇到多个参数会做特殊处理
    单纯的使用#{参数名}会报以下异常：
    org.apache.ibatis.binding.BindingException:
    Parameter 'id' not found.
    Available parameters are [arg1, arg0, param1, param2]

    mybatis的多个参数会被封装成一个map
        key：param1，param2...paramN，或者参数的索引也可以
        value:传入的参数值
    #{}就是从map中获取指定的key的值

三、命名参数
    明确指定封装参数map时的key：@Param("id")
    多个参数会被封装成一个map：
        key:使用@Param注解指定的值
        value:参数值
    #{指定的key}可以取出指定的值

    多个参数时推荐使用命名参数的方式

四、POJO参数
    如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入POJO
    #{属性名}：取出传入的pojo的属性值

五、map
    如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用的话，为了方便，我们也可以传入map
    #{key}:取出map中对应的值

六、DTO
    如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个DTO（Data Transfer Object）数据传输对象
    eg:
    Page{
        int index;
        int size;
    }

===========================================思考=============================================================
public Employee getEmp(@Param("id")Integer id, String lastName);
取值：id==>#{id/param1}, lastName==>#{param2}

public Employee getEmp(Integer id, Employee emp);
取值：id==>#{param1},lastName==>#{param2.lastName}

public Employee getEmp(Integer id, @Param("e")Employee emp);
取值：id==>#{param1},lastName==>#{param2.lastName / e.lastName}

####特别注意：如果参数是Collection(List,Set)类型或者是数组，
mybatis也会做特殊处理，也会把传入的list或者数据封装在map中。
    key：Collection(collection，如果是List，还可以使用key{list})
public Employee getEmp(List<Integer> ids);
取值：取出第一个id的值，#{list[0]}

=========================================结合源码看mybatis如何处理参数===========================================
总结：参数多时会封装map,为了不混乱，我们可以使用@Param来指定封装是使用的key；
#{key}就可以取出map中的值；

getEmpByIdAndLastName(@Param("id") Integer id, @Param("lastName") String lastName);

ParamNameResolver解析参数封装map：
//1、names:  {0=id, 1=lastName}：构造器的时候就确定好了
确定流程：
    1、获取每个标了@Param注解的param值，id, lastName,赋值给name
    2、每次解析一个参数给map中保存信息，（key，参数索引，value，name的值）
        name的值：
            标注了@Param的值：注解的值；
            没有标注：
                1、全局配置：useActualParamName(jdk1.8),name = 参数名
                2、name = map.size(),相当于当前元素的索引

//args[1,"jerry]
public Object getNamedParams(Object[] args) {
    int paramCount = this.names.size();
    //1、参数为null，直接返回
    if (args != null && paramCount != 0) {

        //2、如果只有一个元素，且没有@Param注解，args[0]:单个参数直接返回
        if (!this.hasParamAnnotation && paramCount == 1) {
            Object value = args[(Integer)this.names.firstKey()];
            return wrapToMapIfCollection(value, this.useActualParamName ? (String)this.names.get(0) : null);

        //3、多个元素或者有@Param注解
        } else {
            Map<String, Object> param = new ParamMap();
            int i = 0;

            //4、遍历names集合：{0=id，1=lastName}
            for(Iterator var5 = this.names.entrySet().iterator(); var5.hasNext(); ++i) {
                Entry<Integer, String> entry = (Entry)var5.next();

                //names集合的value作为key,names集合的key有做为取args[]值的参考args[0],args[1].
                //{id:args[0]即为1, lastName=args[1]即为jerry}
                param.put(entry.getValue(), args[(Integer)entry.getKey()]);

                //额外的将每一个参数也保存到map中，使用新的key：param1...paramN
                //效果：有@Param注解可以#{指定key}，或者#{param1}
                String genericParamName = "param" + (i + 1);
                if (!this.names.containsValue(genericParamName)) {
                    param.put(genericParamName, args[(Integer)entry.getKey()]);
                }
            }
            return param;
        }
    } else {
        return null;
    }
}
=============================================参数的获取========================================================
#{}:可以获取map中的值或者pojo对象属性的值；
${}:可以获取map中的值或者pojo对象属性的值；
    区别：
        #{}是以预编译的形式，将参数设置到sql语句中，PreparedStatement，防止sql注入
        ${}取出值直接拼装在sql语句中,会有安全问题
        大多数情况下，我们取参数的值，都应该去使用#{}

        对于原生jdbc不支持占位符的地方，我们可以使用${}进行取值
        比如分表，排序等：eg:按照年份拆分
            select * from ${year}_salsay where xxx;
            select * from 2016_salary where xxx;



























